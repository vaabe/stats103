pnorm(-1.667)
pnorm(0.91667)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
## read data
emissions = read.csv('../data/emissions.csv')
## compute mean and sd of each group
xbar_rr = mean(emissions$rolling_road)
sd_rr = sd(emissions$rolling_road)
xbar_or = mean(emissions$open_road)
sd_or = sd(emissions$open_road)
cat(paste("sample mean, rolling road =", xbar_rr,
"\n sample sd, rolling road =", sd_rr,
"\n sample mean, open road =", xbar_or,
"\n sample sd, open road =", sd_or))
## define function for computing confidence intervals
confidence_interval = function(data, conflevel) {
n = length(data)           # sample size
xbar = mean(data)          # sample mean
SE = sd(data) / sqrt(n)    # standard error
alpha = 1 - conflevel      # alpha
lb = xbar + qt(alpha/2, df = n-1) * SE    # lower bound
ub = xbar + qt(1-alpha/2, df = n-1) * SE  # upper bound
cat(paste(c('sample mean =', round(xbar,3), '\n',
conflevel*100, '% confidence interval:', '\n',
'lower bound =', round(lb,3), '\n',
'upper bound =', round(ub,3))))
}
## 95% confidence interval for mean rolling road emission
confidence_interval(emissions$rolling_road, 0.95)
## 95% confidence interval for mean open road emissions
confidence_interval(emissions$open_road, 0.95)
t.test(emissions$rolling_road, emissions$open_road, conf.level = 0.95)
t.test(emissions$rolling_road, emissions$open_road, conf.level = 0.95)
dimnames(drugstudy) = list(drug = c('placebo','drug1','drug2','drug3','drug4'),
nausea_incidence = c('nausea','no_nausea'))
drugstudy
drugstudy = as.table(rbind(c(46,42), c(24,41), c(15,66),c(41,49),c(23,43)))
dimnames(drugstudy) = list(drug = c('placebo','drug1','drug2','drug3','drug4'),
nausea_incidence = c('nausea','no_nausea'))
drugstudy
## test drug 1 against placebo
chisq.test(drugstudy[c(1,2), ])
## test drug 2 against placebo
chisq.test(drugstudy[c(1,3), ])
## test drug 1 against placebo
chisq.test(drugstudy[c(1,2), ])
## test drug 2 against placebo
chisq.test(drugstudy[c(1,3), ])
## test drug 3 against placebo
chisq.test(drugstudy[c(1,4), ])
## test drug 4 against placebo
chisq.test(drugstudy[c(1,5), ])
experiment = function(n, mu) {
sample = rexp(n, 1/mu)
pval = t.test(sample, mu = 1)$p.value
return(pval < 0.05)
}
## run the experiment once with n = 30 and true mean = 2
experiment(30,2)
## repeat the experiment 1000 times and compute the proportion of rejections
repeats = replicate(1000, experiment(30, 2))
mean(repeats)
## same as above, but change n to be 40
repeats = replicate(1000, experiment(40, 2))
mean(repeats)
## make n = 30 and the true mean = 1.5
repeats = replicate(1000, experiment(30, 1.5))
mean(repeats)
## make n = 30 and the true mean = 1.5
repeats = replicate(1000, experiment(30, 1,))
## make n = 30 and the true mean = 1.5
repeats = replicate(1000, experiment(30, 1,))
## make n = 30 and the true mean = 1.5
repeats = replicate(1000, experiment(30, 1))
mean(repeats)
## make n = 30 and the true mean = 1.5
repeats = replicate(1000, experiment(30, 1))
mean(repeats)
## make n = 30 and the true mean = 1.5
repeats = replicate(1000, experiment(30, 1))
mean(repeats)
## make n = 30 and the true mean = 1.5
repeats = replicate(1000, experiment(30, 1))
mean(repeats)
## make n = 30 and the true mean = 1.5
repeats = replicate(1000, experiment(30, 1))
mean(repeats)
## make n = 30 and the true mean = 1.5
repeats = replicate(1000, experiment(30, 1.1))
mean(repeats)
## make n = 30 and the true mean = 1.5
repeats = replicate(1000, experiment(50, 1.1))
mean(repeats)
## make n = 30 and the true mean = 1.5
repeats = replicate(1000, experiment(1000, 1.1))
mean(repeats)
## make n = 30 and the true mean = 1.5
repeats = replicate(1000, experiment(800, 1.1))
mean(repeats)
## make n = 30 and the true mean = 1.5
repeats = replicate(1000, experiment(30, 1.5))
mean(repeats)
## make n = 30 and the true mean = 1.5
repeats = replicate(1000, experiment(30, 1.5))
mean(repeats)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
## read data
emissions = read.csv('../data/emissions.csv')
## read data
emissions = read.csv("https://stats103.org/data/efw.csv")
View(emissions)
## read data
emissions = read.csv("https://stats103.org/data/emissions.csv")
## compute mean and sd of each group
xbar_rr = mean(emissions$rolling_road)
sd_rr = sd(emissions$rolling_road)
xbar_or = mean(emissions$open_road)
sd_or = sd(emissions$open_road)
cat(paste("sample mean, rolling road =", xbar_rr,
"\n sample sd, rolling road =", sd_rr,
"\n sample mean, open road =", xbar_or,
"\n sample sd, open road =", sd_or))
## define function for computing confidence intervals
confidence_interval = function(data, conflevel) {
n = length(data)           # sample size
xbar = mean(data)          # sample mean
SE = sd(data) / sqrt(n)    # standard error
alpha = 1 - conflevel      # alpha
lb = xbar + qt(alpha/2, df = n-1) * SE    # lower bound
ub = xbar + qt(1-alpha/2, df = n-1) * SE  # upper bound
cat(paste(c('sample mean =', round(xbar,3), '\n',
conflevel*100, '% confidence interval:', '\n',
'lower bound =', round(lb,3), '\n',
'upper bound =', round(ub,3))))
}
## 95% confidence interval for mean rolling road emission
confidence_interval(emissions$rolling_road, 0.95)
## 95% confidence interval for mean open road emissions
confidence_interval(emissions$open_road, 0.95)
## two sample t-test for a difference in means between rolling road and open road emissions
t.test(emissions$rolling_road, emissions$open_road, conf.level = 0.95)
## create contingency table for drug study data
drugstudy = as.table(rbind(c(46,42), c(24,41), c(15,66),c(41,49),c(23,43)))
dimnames(drugstudy) = list(drug = c('placebo','drug1','drug2','drug3','drug4'),
nausea_incidence = c('nausea','no_nausea'))
drugstudy
## test drug 1 against placebo
chisq.test(drugstudy[c(1,2), ])
## test drug 2 against placebo
chisq.test(drugstudy[c(1,3), ])
## test drug 3 against placebo
chisq.test(drugstudy[c(1,4), ])
## test drug 4 against placebo
chisq.test(drugstudy[c(1,5), ])
## function to generate a sample of n observations from the exponential distribution
## returns TRUE if the null is rejected, FALSE if the null is not rejected
experiment = function(n, mu) {
sample = rexp(n, 1/mu)
pval = t.test(sample, mu = 1)$p.value
return(pval < 0.05)
}
## run the experiment once with n = 30 and true mean = 2
experiment(30,2)
## repeat the experiment 1000 times and compute the proportion of rejections
repeats = replicate(1000, experiment(30, 2))
mean(repeats)
## same as above, but change n to be 40
repeats = replicate(1000, experiment(40, 2))
mean(repeats)
## make n = 30 and the true mean = 1.5
repeats = replicate(1000, experiment(30, 1.5))
mean(repeats)
